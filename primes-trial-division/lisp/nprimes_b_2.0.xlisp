(defun divp (n list)
  (mapc #'(lambda (p)
    (cond ((zerop (rem n p)) (return-from divp T)))) list)
  (return-from divp nil))

(defun primes (n)
  (setq count 3)
  (setq primes (list 2))
  (tagbody NEXT (cond ((< (length primes) n)
                       (cond ((divp count primes) nil)
                             (T (nconc primes (list count)))))
                      (T (return-from primes primes)))
                (setq count (+ 1 count))
                (go NEXT)))
